thinking.txt
------------
This file is for strategy, thinking, and over all notes while
coding on softenv. It's a good idea Alan started and we should keep up.


24 February 2012 ( wscullin )

    I gave the legacy code a reread from start to finish this evening. I understand the reason now for compiling to a database file and am thinking about if that's something that should be preserved moving forward - or if it should be exploited a little further.
    
    It's not clear to me right now how to add functionality. Things that are needed early:
    
    - in-gathering of fixes to the legacy code 
    - dependancies lists and checking
    - ability to save current user state
    - making sure that multiple databases really are supported
    -- this means making sure that etc/*/*.db gets globbed 
       and watched for changes
    - stock metadata tags / a way to call in a package metadata file
    - a conversation on the UI
    -- modules does this partly right as module gives you all the commands 
       possible soft gives a short help, but either it needs more functionality or to tell the user more...
    -- the admin commands need meaningful names
    
    I started also to replicate the legacy perl parser in python and am looking for a better document parser than a bunch of python regexes. This isn't knocking the legacy parser, it's a testament to perl's rexeg engine.

17 April 2012 ( davidr )

=1 

Instead of rewriting whatami, should we think about replacing it with another, 
public utility? The only thing that comes to mind is facter, which is very 
robust and well-maintained. The downside would be the added ruby+facter 
dependency, but the benefits may very well outweigh the downside.

If not, perhaps some sort of compatibility layer where the user can supply
a fact-prividing program of their choosing?

=2

Also, perahps an eventual integration with autoconf/automake packages would 
be very handy, like a:

  [softenv2_cmd_name] build tgz ~/src/gcc-4.7.0.tar.gz -- --prefix=foo

which does the ./configure && make && make install and generates the softenv2
module configuration

Or even a way to use the same build arguments from a previous version of the
package:

  [softenv2_cmd_name] build tgz --frompkg=gcc-4.4.3 ~/src/gcc-4.7.0.tar.gz

8 May 2012 (estrabd)

I am digging back into my brain for a "wish list" of things that I wish we had
when we were managing things at LSU HPC.

I modified the configuration "compiler" to accept additional keywords that would
allow us to define various meta data for documentation that we auto-generated, the
stuffed into a MediaWiki (see https://docs.loni.org/wiki/Linux_Software, for example).

We were also trying to create a way to automate the deployment and testing of all
software, and though this system one of our design goals was could also automate
the generation of SoftEnv configuration files.

After banging my head against it, I decided that what I really though would have
been better would have been to adopt something like NetBSD's pkgsrc, but create
a "distribution" for HPC environments. (I still think it's a good idea); the benefit
there is that one can use one of the many tools out there for reading through the 
pkgsrc database. I digress.

So I would suggest that we think about including the following:

1. ability to auto-generate documentation based on the configuration file

2. make it easy (or keep it "easy") to compose configurations using some sort
of "include" directive. 

Regarding the overall design, I recall being vehemently against the TCL project,
Modules, that TeraGrid seems to have been pushing down our throats. Once I left
LSU and went to UH, I was forced to use Modules...and I liked it, a lot.  But, it's
a turbo pain in the ass to set up.

What I liked about Modules:

a. it makes it easy to build up an environment via commandline; a user's configuration
file is simply a series of "module add X", etc. There are some basic features to denote
what modules are implied by one another (load one, the others must get loaded) or what
modules are mutually exclusive (others must get unloaded).

b. it allowed one to create their own set of module definitions in their own home directory.

What I hated about it:

Simply, it's written in TCL and the configuration files were a nightmare to do anything 
complicated.

Matters of implementation:

Although I don't really do HPC anymore, I work in many different *nix environments that could
benefit from something like SoftEnv2 or Modules; I do 99% of my work in Perl, so I am glad
that you're choosing Perl again (I think :). 

Here are some suggestions:

* modularize as much as makes sense (will help you with that OO approach)

* I would not use Moose or anything like that

* package distribution should be in a CPAN style; probably in the "App" namespace;

* take inventory of the various configuration formats and parsers out there; YAML might be
  appropriate

* unit test; Test::More is really nice and the "prove" utility is very handy

* accepting input from the terminal can be made easier by a myriad of CPAN modules

In closing, one of my goals is to make "Perlbrew" a thing of the past; I work with the guy
that wrote and maintains "Perlall"; I don't think this will replace that (although it's
meant to render Perlbrew moot), I do think he'd be interested in following the progress
of this project.

12 July 2014 (estrabd)

This project popped up on my radar screen again, and I am interested in giving it another go.

I looked through some of the legacy code, but for right now what strikes me most is the style
of Perl being used. Since Perl is what I do full time these days, I have a couple of thoughts:

* the Perl is generally very good - particularly for the time period (late 90s/early 2000s).

The Good:

* use strict
* use of subroutines

The Bad:

* "&subroutine_name" is no longer a recommended practice
* "require script.pl" is now considered bad style
* no proper use of modules, hence the need for 'require'

Other higher level "bad" things are:

* the use of a proprietary format for the "database"

Other thoughts (some may be repeated from my notes above):

* configuration database should be a standard format, but also be able to have "includes"
* once a configuration format is decided, we should be able to easily create a conversion script from old style configs
* the new configs should make it easy to generate documentation (the software list at https://docs.loni.org/wiki/Linux_Software was generated from parsing softenv configs, but it was a hack)
* configuration entries should be as composable as possible, meaning that it is easy to create a environment ala-cart so long as there are no "conflicts" (I think this is largely how "modules" works)
* maybe have a concept of "profiles" - I think softenv might have this, but I can't remember atm
* ability to create my own configs or config overrides in $HOME, maybe for self-managed/non-privileged software installations

From what I recall, softenv is more of an engine for generating resource files for (ba)sh/(t)csh; so we might what to fully embrace this and look at it from a templating perspective. The other side of the coin is that we can see about using it to directly affect the environment, which I am sure is possible with Perl.





















